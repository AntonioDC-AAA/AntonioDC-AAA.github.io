<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IO技术 on Blog</title>
    <link>https://antoniodc-aaa.github.io/tags/io%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in IO技术 on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://antoniodc-aaa.github.io/tags/io%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IO技术</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/io/</guid>
      <description>IO技术 《./操作系统/IO多路复用的三种机制》讲述了Linux下5种IO模型
阻塞和非阻塞是指当进程访问的数据如果尚未就绪,进程是否需要等待,简单说这相当于函数内部的实现区别,也就是未就绪时是直接返回还是等待就绪;
同步和异步是指的访问数据的机制，同步指的是主动请求并等待I/O完毕的方式，当数据就绪后在读写的时候必须阻塞（区别就绪与读写两个阶段，同步的读写必须阻塞），异步则是指主动请求数据后便可以继续处理其他任务，随后等待I/O，操作完毕的通知，这可以使得进程在数据读写时不阻塞（等待通知）
IO写的四种方法（简单文件写） //方法 1 io.WriteString(f, wireteString)	//f：文件句柄，Str:要写的 //方法 2 ioutil.</description>
    </item>
    
  </channel>
</rss>