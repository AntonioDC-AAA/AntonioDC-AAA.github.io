<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on Blog</title>
    <link>https://antoniodc-aaa.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://antoniodc-aaa.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IO多路复用</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/io/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/io/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%9C%BA%E5%88%B6/</guid>
      <description>IO多路复用的三种机制 IO多路复用（multiplexing）的本质是通过一种机制（系统内核缓冲I/O数据），让单个进程可以监视多个文件描述符，一旦某个描述符就绪（一般是读就绪或者是写就绪），就能够通知程序进行相应的读写操作
Unix五种IO模型 简述 [1] blocking IO - 阻塞IO [2] nonblocking IO - 非阻塞IO [3] IO multiplexing - IO多路复用 [4] signal driven IO - 信号驱动IO [5] asynchronous IO - 异步IO</description>
    </item>
    
    <item>
      <title>IO技术</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/io/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/io/io/</guid>
      <description>IO技术 《./操作系统/IO多路复用的三种机制》讲述了Linux下5种IO模型
阻塞和非阻塞是指当进程访问的数据如果尚未就绪,进程是否需要等待,简单说这相当于函数内部的实现区别,也就是未就绪时是直接返回还是等待就绪;
同步和异步是指的访问数据的机制，同步指的是主动请求并等待I/O完毕的方式，当数据就绪后在读写的时候必须阻塞（区别就绪与读写两个阶段，同步的读写必须阻塞），异步则是指主动请求数据后便可以继续处理其他任务，随后等待I/O，操作完毕的通知，这可以使得进程在数据读写时不阻塞（等待通知）
IO写的四种方法（简单文件写） //方法 1 io.WriteString(f, wireteString)	//f：文件句柄，Str:要写的 //方法 2 ioutil.</description>
    </item>
    
    <item>
      <title>发布订阅模式</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/go%E8%AF%AD%E8%A8%80/go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>发布订阅模式 观察者模式又叫作发布订阅模式，属于设计模式中行为模式中的一种。
发布订阅（publish-and-subscribe）模型同城被简写为pub/sub模型。在这个模型中，消息生产者成为发布者（publisher），二消息消费者则成为订阅者（subscriber），生产者和消费者是M:N的关系。在传统生产者和消费者模型中，是将消息发送到一个队列中，二发布订阅模型则是将消息发布给一个主题。
​	为此，我们构建一个名为pubsub	的发布订阅模型支持包：
import ( &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) type ( subscriber chan interface{} //订阅者为一个管道 	topicFunc func(v interface{}) bool //主题为一个过滤器 ) //发布者对象 type Publisher struct { m sync.</description>
    </item>
    
  </channel>
</rss>