<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go语言三方库 on Blog</title>
    <link>https://antoniodc-aaa.github.io/tags/go%E8%AF%AD%E8%A8%80%E4%B8%89%E6%96%B9%E5%BA%93/</link>
    <description>Recent content in Go语言三方库 on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2019 16:07:30 +0800</lastBuildDate>
    
	<atom:link href="https://antoniodc-aaa.github.io/tags/go%E8%AF%AD%E8%A8%80%E4%B8%89%E6%96%B9%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebSocket</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-websockets/</link>
      <pubDate>Mon, 23 Dec 2019 16:07:30 +0800</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-websockets/</guid>
      <description>第三方库-WebSockets From GoDoc 概述 The Conn type represents a WebSocket connection.</description>
    </item>
    
    <item>
      <title>并发的非阻塞缓存</title>
      <link>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%B9%B6%E5%8F%91%E7%9A%84%E9%9D%9E%E9%98%BB%E5%A1%9E%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 29 Nov 2019 16:07:30 +0800</pubDate>
      
      <guid>https://antoniodc-aaa.github.io/post/%E5%85%B6%E4%BB%96/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/%E5%B9%B6%E5%8F%91%E7%9A%84%E9%9D%9E%E9%98%BB%E5%A1%9E%E7%BC%93%E5%AD%98/</guid>
      <description>并发的非阻塞缓存 博客地址：https://cloud.tencent.com/developer/article/1501662
个人理解：这是做了一个网络爬虫，爬取网页，然后打印
设计并发，不重复，无阻塞cache
1.并发：go func(){}()直接启动新的goroutine来实现
2.并发安全：使用sysnc.Mutex互斥锁来实现
3.无阻塞：get之前锁定，赋值一个入口指针后立马解锁，然后进行http请求，这样不会被慢的http请求阻塞住
4.不重复：利用channel，多个并发同时写的时候，利用channel阻塞住，等第一个请求写完后关闭channel，其他goroutine直接请求
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.</description>
    </item>
    
  </channel>
</rss>